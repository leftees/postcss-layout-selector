env:
  browser: true
  es6: true
  node: true

extends:
  "eslint:recommended"

parserOptions:
  sourceType: module

rules:
  # Style
  indent:
    - error
    - 2
  linebreak-style:
    - error
    - unix
  quotes:
    - error
    - double
  semi:
    - error
    - never

  # Possible Errors
  no-extra-parens:
    - off

  # Best Pracises
  array-callback-return:
    - warn
  block-scoped-var:
    - off

  # Keep this down. The default of 20 is far to high in my opinion.
  complexity:
    - error
    - 5
  consistent-return:
    - error

  # New for me: allow curly-free one liners. This might help with my tendency to write
  # more compact braces in Altman style which does not actually worked well together.
  curly:
    - warn
    - multi-line
  dot-location:
    - error
    - object
  dot-notation:
    - error
    - allowKeywords: false

  # Smart option allows simple equal for null-comparison which is good
  eqeqeq:
    - error
    - smart
  no-alert:
    - error

  # Was mainly relevant while people extended Object.prototype.xxx
  guard-for-in:
    - off

  # Match ES5 strict
  no-caller:
    - error

  # Hard to read code must be forbidden
  no-div-regex:
    - error

  # Makes codes easier to read
  no-else-return:
    - error

  no-empty-function:
    - error
  no-empty-pattern:
    - error

  # This is just stupid
  no-eq-null:
    - off

  no-eval:
    - error
  no-extend-native:
    - error
  no-fallthrough:
    - error
  no-floating-decimal:
    - error

  # I like some of these, but numbers are to awkward for me.
  no-implicit-coercion:
    - error
    - boolean: true
      string: true
      number: false

  # Does not make sense with ES6 modules
  no-implicit-globals:
    - off

  no-implied-eval:
    - error
  no-invalid-this:
    - error
  no-iterator:
    - error
  no-labels:
    - error
  no-lone-blocks:
    - error
  no-loop-func:
    - error

  # Good style
  no-magic-numbers:
    - error

  # Useless formatting with high maintenance
  no-multi-spaces:
    - error

  no-multi-str:
    - error
  no-native-reassign:
    - error
  no-new-func:
    - error
  no-new-wrappers:
    - error
  no-octal:
    - error
  no-octal-escape:
    - error

  # Prevent side effects...
  no-param-reassign:
    - error

  # For maintainability of NodeJS code
  no-process-env:
    - error

  # Deprecated feature
  no-proto:
    - error

  # Disabled. Therefor they are variables, right?
  no-redeclare:
    - off

  # Readability wins
  no-return-assign:
    - error

  no-script-url:
    - error
  no-self-assign:
    - error
  no-self-compare:
    - error

  # Omit magic syntax... Readability for all wins
  no-sequences:
    - error

  # Good idea to keep some more error info:
  # "The fundamental benefit of Error objects is that they automatically keep track of where they were built and originated."
  no-throw-literal:
    - error

  no-unmodified-loop-condition:
    - error
  no-unused-expressions:
    - error
  no-useless-call:
    - error
  no-useless-concat:
    - error
  no-void:
    - error
  no-with:
    - error

  # Mainly for securing code compatibility
  radix:
    - error
    - always

  # Does not improve maintainability in my opinion... instead makes
  # unused variables harder to track over time
  vars-on-top:
    - off

  # Prefer inside for readability
  wrap-iife:
    - error
    - inside

  # Actually interesting that this ugliness should be even something to consider
  yoda:
    - error
    - never

